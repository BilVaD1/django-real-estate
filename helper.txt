https://www.youtube.com/watch?v=UsfR34yl9K8&list=PL2t6cW2FkFCg9Ky0CphSSr0pJwHNb1pny&ab_channel=API-Imperfect

superuser:
bilvad1@gmail.com
User: admin
Password: adimn

Admin panel:
http://localhost:8080/supersecret/

Maitrap is set up for testing the emails
uid and token for body in Postman are possible to take from the MailTrap inboxes mails

Docker:
docker-compose config - комманда которая позволяет посмотреть конфиг файл. Позволяет проверить правильно ли отображаются env variables
docker compose up --build -d --remove-orphans - код для запуска сборки образов image
docker compose logs - для проверки логов
docker compose down


The Makefile is a set of rules and commands to automate common tasks in a Dockerized Django project.(Not natively for Windows)
Exmaple of using Makefile via command line:
make build -> Builds all images specified in docker-compose.yml file

Gpt:

request - это объект, который представляет текущий HTTP-запрос в Django.

request.user - это объект пользователя, связанный с текущим запросом. 
В Django, когда пользователь проходит аутентификацию (например, входит в систему), информация о пользователе сохраняется в объекте request.user.

request.user.username - это атрибут объекта пользователя, который содержит имя пользователя (или логин) этого пользователя.

Таким образом, выражение request.user.username используется для получения имени пользователя т
екущего аутентифицированного пользователя, который делает текущий HTTP-запрос. 
В вашем коде оно используется для сравнения с переменной username из URL, чтобы убедиться, что пользователь обновляет свой собственный профиль, а не чужой.




pyproject.toml is a configuration file used in Python projects, primarily for configuration and settings related to tools and processes in the Python ecosystem. 
It serves as a central place to define various project-specific configurations. Here are some common use cases for pyproject.toml:

Build Systems and Packaging:

[build-system] section: It specifies the build backend and requirements for building the project. For example, 
it may include details about the build tools and dependencies needed during the build process.
Code Formatting:

[tool.black] section: It can be used to configure the black code formatter.
 In your provided snippet, it includes an exclusion pattern for files or directories that should not be formatted by black.
Dependency Management:

[tool.poetry] section: If you are using the Poetry dependency management tool, 
this section can include information about project dependencies, scripts, and other related settings.
Linting and Style Checking:

[tool.flake8] section: Configuration for the Flake8 linter can be placed here. 
Flake8 combines linting with style checking using plugins.
Other Tools:

Various other tools and settings may have their own sections within pyproject.toml. 
For instance, if you use mypy for static type checking, it might have a dedicated section for configuration.
Standardized Configuration:

As of PEP 518 and PEP 517, pyproject.toml is recognized as the standardized configuration file for Python projects. 
It helps unify configuration settings across different tools and encourages a consistent project structure.
Readability and Maintainability:

Having a centralized configuration file enhances the readability and maintainability of the project. Developers can easily find and modify project-wide settings in one place.
Overall, pyproject.toml aims to provide a standardized and comprehensive configuration solution for Python projects, 
promoting consistency and ease of use across various tools and processes.


Celery
https://youtu.be/9H9jr-sfHTo?list=PL2t6cW2FkFCg9Ky0CphSSr0pJwHNb1pny&t=6396

Celery в Django используется для асинхронной обработки задач. Веб-приложения могут выполнять множество операций, которые требуют времени, 
такие как отправка электронных писем, обработка изображений, взаимодействие с внешними API и другие долгие операции. 
Если выполнять их синхронно во время запроса пользователя, это может привести к задержкам и ухудшению производительности.

Celery позволяет выносить эти задачи в фоновый процесс, который работает независимо от основного приложения. Он использует брокер сообщений (например, RabbitMQ или Redis) 
для передачи задач между вашим веб-приложением и фоновым процессом, где эти задачи выполняются.

Таким образом, Celery помогает создать более отзывчивые веб-приложения, обеспечивая асинхронную обработку задач и избегая блокировки основного потока выполнения.


Брокер в системе асинхронной обработки задач, такой как Celery, играет важную роль. 
Его цель - обеспечить связь между вашим веб-приложением (или другим источником задач) и фоновым процессом, который фактически выполняет эти задачи. 
Вот почему брокеры важны:

1. Передача задач. 
Брокер служит посредником для передачи задачи от вашего приложения к фоновому процессу. 
Он принимает задачу от отправителя (веб-приложения) и доставляет её получателю (фоновому процессу), где она будет обработана.

2. Асинхронность. 
Брокер позволяет вашему приложению быть асинхронным. 
Вместо блокировки основного потока выполнения, приложение может отправить задачу брокеру и продолжить свою работу, не ожидая завершения задачи.

3. Управление задачами. 
Брокер обычно предоставляет инструменты для управления задачами, 
такие как возможность проверки статуса задачи, отслеживание ошибок и повторная отправка задач в случае неудачного выполнения.

4. Масштабируемость. 
Использование брокера делает систему более масштабируемой. 
Веб-приложение может отправлять задачи брокеру, и вы можете добавлять или изменять фоновые процессы в зависимости от нагрузки.

Примеры брокеров включают RabbitMQ, Redis и Apache Kafka. Celery использует брокер для эффективного распределения и обработки задач.


Celery (Сельдерей): Это фреймворк для асинхронной обработки задач в приложениях на языке программирования Python.
 Celery позволяет выполнять долгие операции, такие как отправка электронных писем, обработка изображений и другие, асинхронно, 
 не блокируя основной поток выполнения веб-приложения. Он использует брокер сообщений для передачи задач между веб-приложением и фоновым процессом.

Redis (Редис): Это высокопроизводительная система управления базами данных и брокер сообщений. 
В контексте Celery, Redis часто используется в качестве брокера сообщений. 
Это означает, что Celery использует Redis для передачи задач от веб-приложения к фоновому процессу. 
Redis также может использоваться для хранения промежуточных результатов задач и для обмена сообщениями между разными частями системы.

Flower (Флауэр): Это веб-интерфейс и монитор для Celery. 
http://localhost:5557/
Flower предоставляет удобный способ отслеживать выполнение задач, мониторить состояние рабочих процессов и анализировать статистику выполнения задач. 
Он может визуализировать текущие и завершенные задачи, а также предоставлять информацию о нагрузке на систему.

Таким образом, связь между ними выглядит следующим образом: 
Celery использует Redis в качестве брокера сообщений для передачи и управления задачами между веб-приложением и фоновым процессом. 
Flower предоставляет веб-интерфейс для мониторинга и визуализации работы Celery, что делает управление и отладку процессов более удобными.





Работа сериализатора:

1. Когда сериализатор вызывается для сериализации объекта профиля, он сначала получает объект например User, связанный с профилем.
2. Затем сериализатор получает значение полей указанных в таком формате: username = serializers.CharField(source="user.username"). Это
значит что поле username будет получаться из обьекта user.username. 
full_name = serializers.SerializerMethodField(read_only=True) - така запись значит что поле прощитывается динамически в методе get_full_name
3. Затем в поле  fields = [] указываются все поля которые возвратит сериализатор, включая поля которые прощитываются динамически и которые не надо прощитывать(которые и так указаны в получаемом обьекте в сериализатор)