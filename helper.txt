https://www.youtube.com/watch?v=UsfR34yl9K8&list=PL2t6cW2FkFCg9Ky0CphSSr0pJwHNb1pny&ab_channel=API-Imperfect

superuser:
bilvad1@gmail.com
User: admin
Password: adimn


Maitrap is set up for testing the emails
uid and token for body in Postman are possible to take from the MailTrap inboxes mails

Docker:
docker-compose config - комманда которая позволяет посмотреть конфиг файл. Позволяет проверить правильно ли отображаются env variables
docker compose up --build -d --remove-orphans - код для запуска сборки образов image
docker compose logs - для проверки логов
docker compose down


The Makefile is a set of rules and commands to automate common tasks in a Dockerized Django project.(Not natively for Windows)
Exmaple of using Makefile via command line:
make build -> Builds all images specified in docker-compose.yml file

Gpt:

request - это объект, который представляет текущий HTTP-запрос в Django.

request.user - это объект пользователя, связанный с текущим запросом. 
В Django, когда пользователь проходит аутентификацию (например, входит в систему), информация о пользователе сохраняется в объекте request.user.

request.user.username - это атрибут объекта пользователя, который содержит имя пользователя (или логин) этого пользователя.

Таким образом, выражение request.user.username используется для получения имени пользователя т
екущего аутентифицированного пользователя, который делает текущий HTTP-запрос. 
В вашем коде оно используется для сравнения с переменной username из URL, чтобы убедиться, что пользователь обновляет свой собственный профиль, а не чужой.




pyproject.toml is a configuration file used in Python projects, primarily for configuration and settings related to tools and processes in the Python ecosystem. It serves as a central place to define various project-specific configurations. Here are some common use cases for pyproject.toml:

Build Systems and Packaging:

[build-system] section: It specifies the build backend and requirements for building the project. For example, it may include details about the build tools and dependencies needed during the build process.
Code Formatting:

[tool.black] section: It can be used to configure the black code formatter. In your provided snippet, it includes an exclusion pattern for files or directories that should not be formatted by black.
Dependency Management:

[tool.poetry] section: If you are using the Poetry dependency management tool, this section can include information about project dependencies, scripts, and other related settings.
Linting and Style Checking:

[tool.flake8] section: Configuration for the Flake8 linter can be placed here. Flake8 combines linting with style checking using plugins.
Other Tools:

Various other tools and settings may have their own sections within pyproject.toml. For instance, if you use mypy for static type checking, it might have a dedicated section for configuration.
Standardized Configuration:

As of PEP 518 and PEP 517, pyproject.toml is recognized as the standardized configuration file for Python projects. It helps unify configuration settings across different tools and encourages a consistent project structure.
Readability and Maintainability:

Having a centralized configuration file enhances the readability and maintainability of the project. Developers can easily find and modify project-wide settings in one place.
Overall, pyproject.toml aims to provide a standardized and comprehensive configuration solution for Python projects, promoting consistency and ease of use across various tools and processes.