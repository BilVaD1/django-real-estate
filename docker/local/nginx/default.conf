# Определяет группу серверов для API. В данном случае, это сервер с именем api на порту 8000.
upstream api {
    server api:8000;
}

# Определяет группу серверов для клиентского приложения. Сервер с именем client на порту 3000.
#upstream client {
#  server client:3000;
#}

server {
    # Устанавливает максимальный размер тела запроса для клиента в 20 мегабайт.
    client_max_body_size 20M; 
    # Прослушивание порта 80 для входящих HTTP-запросов.
    listen 80;

    # Определяет, как NGINX должен обрабатывать запросы к /api/v1. Они будут перенаправлены на сервера из группы api.
    location / {
        # proxy_pass Указывает, куда направлять запросы.
        proxy_pass http://api;
        # Различные proxy_set_header инструкции устанавливают заголовки для проксированных запросов, такие как X-Forwarded-For, Host, X-Real-IP и другие.
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        # Отключает автоматические перенаправления NGINX, что полезно, например, при работе с API.
        proxy_redirect off;
    }

    # Также перенаправляет запросы на сервера из группы api, но для URL, начинающихся с /supersecret.
    location /supersecret {
        proxy_pass http://api;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_redirect off;

    }

    # Определяет, где на сервере находятся статические файлы и как их обслуживать.
    location /staticfiles/ {
        alias /app/staticfiles/;
    }

    # Аналогично предыдущему, но для медиа-файлов.
    location /mediafiles/ {
        alias /app/mediafiles/;
    }

    # Обрабатывает WebSocket соединения, направляя их на серверы из группы client.
    #location /ws {
    #  proxy_pass http://client;
    #  proxy_http_version 1.1;
    #  proxy_set_header Upgrade $http_upgrade;
    #  proxy_set_header Connection "Upgrade";
    #}

    # Обрабатывает все остальные запросы, направляя их на серверы из группы client.
    #location / {
    #   proxy_pass http://client;
    #   proxy_redirect off;
    #   proxy_set_header Host $host;
    #   proxy_set_header X-Real-IP $remote_addr;
    #   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #   proxy_set_header X-Forwarded-Host $server_name;
   #}



}


# Эта конфигурация позволяет NGINX эффективно проксировать запросы между вашим API (Django) и клиентским приложением (React), а также обслуживать статические и медиа-файлы. WebSocket соединения также обрабатываются для клиентского приложения.