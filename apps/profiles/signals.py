"""
В предоставленном коде определены две функции, связанные с сигналами Django, 
которые автоматически создают и сохраняют профиль пользователя при создании или обновлении модели пользователя. 
"""

import logging
from django.db.models.signals import post_save # сигнал, отправляемый после сохранения объекта в базе данных.
from django.dispatch import receiver #  декоратор, который связывает функцию с сигналом.
from real_estate.settings.base import AUTH_USER_MODEL
from apps.profiles.models import Profile

logger = logging.getLogger(__name__) # Создается объект логгера для записи логов в файл. В данном случае, логгер связан с именем модуля (__name__).

@receiver(post_save, sender=AUTH_USER_MODEL)
def create_user_profiel(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance) # Если объект был только что создан(AUTH_USER_MODEL) (created=True), создается профиль пользователя (Profile.objects.create(user=instance)).

@receiver(post_save, sender=AUTH_USER_MODEL)
def save_user_profile(sender, instance, **kwargs):
    instance.profile.save() # Вызывается метод save для профиля пользователя, что приводит к сохранению профиля в базе данных (instance.profile.save()).
    logger.info(f"{instance}'s profile created") # Записывается информационное сообщение в лог о создании профиля пользователя.

"""
Таким образом, эти функции автоматически создают и сохраняют профиль пользователя при создании или обновлении объекта модели пользователя, 
и ведут логирование этого события.
"""




"""
Файл signals.py в Django используется для определения и обработки сигналов. 
Сигналы - это механизм, который позволяет отправлять сигналы (уведомления) при определенных событиях в приложении Django. 
Давайте рассмотрим, зачем они нужны и как они работают:

Разделение функциональности:

Использование сигналов позволяет разделить функциональность вашего приложения на более мелкие, независимые части.
Разделять логику обработки событий от кода, который генерирует эти события.
Обработка событий:

Сигналы могут быть использованы для обработки событий после того, как определенное действие произошло в приложении.
Например, после сохранения объекта в базе данных, после входа пользователя в систему и т.д.
Реакция на изменения данных:

Сигналы позволяют реагировать на изменения данных в базе данных.
Например, при создании, обновлении или удалении объекта модели.
Избегание жесткой зависимости:

Использование сигналов позволяет избегать жесткой зависимости между разными частями вашего приложения.
Модули могут взаимодействовать через сигналы, не зная друг о друге напрямую.
Логирование и аудит:

Сигналы могут быть использованы для регистрации событий и создания журналов (логов).
Например, регистрация изменений в моделях для целей аудита.
Пример сигнала в signals.py:

from django.db.models.signals import post_save
from django.dispatch import receiver
from django.contrib.auth.models import User

@receiver(post_save, sender=User)
def user_created(sender, instance, created, **kwargs):

    # Обработчик сигнала, вызывается при создании или обновлении пользователя.

    if created:
        print(f"User {instance.username} created!")
    else:
        print(f"User {instance.username} updated!")

Здесь post_save - это сигнал, который отправляется после сохранения объекта в базе данных. 
Декоратор @receiver связывает функцию user_created с этим сигналом для обработки событий создания или обновления пользователя.
"""